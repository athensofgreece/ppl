int isChar(char *lexeme, char ch, int *type, FILE *file) {
    int state = 0;
    int lexeme_index = 0;

    while (1) {
        switch (state) {
            case 0: // Start state
                switch (ch) {
                    case '\'': // Opening single quote
                        state = 1; // Transition to inside char literal
                        lexeme[lexeme_index++] = ch;
                        ch = getNextChar(file);
                        break;
                    default:
                        return 0; // Not a valid char literal
                }
                break;

            case 1: // Inside char literal (expecting a valid character)
                switch (ch) {
                    case '\n': // Invalid: newline inside char literal
                    case EOF:  // Invalid: premature end of file
                    case '\'': // Invalid: empty char literal
                        *type = INVALID;
                        return 0;
                    default:
                        if (isalnum(ch)) { // Accept only alphanumeric characters
                            state = 2; // Transition to valid character
                            lexeme[lexeme_index++] = ch;
                            ch = getNextChar(file);
                        } else {
                            *type = INVALID;
                            return 0; // Invalid character
                        }
                        break;
                }
                break;

            case 2: // After valid character (expecting closing single quote)
                switch (ch) {
                    case '\'': // Closing single quote
                        state = 3; // Accepting state
                        lexeme[lexeme_index++] = ch;
                        lexeme[lexeme_index] = '\0'; // Null-terminate the lexeme
                        *type = CHAR_LITERAL_TOKEN;
                        return 1; // Valid char literal
                    default:
                        *type = INVALID;
                        return 0; // Invalid char literal (missing closing quote)
                }
                break;

            default:
                *type = INVALID;
                return 0; // Should never reach here
        }
    }
}
