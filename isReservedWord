int isReservedWord(char *lexeme) {
    int current_state = 0; // Initial state
    int i = 0;

    while (lexeme[i] != '\0') {
        switch (current_state) {
            case 0: // Initial state
                switch (lexeme[i]) {
                    case 'b': current_state = 1; break;  // bool
                    case 'c': current_state = 5; break;  // chain, char
                    case 'f': current_state = 11; break; // false, float
                    case 'i': current_state = 20; break; // int
                    case 't': current_state = 23; break; // true
                    default: return 0; // Not a reserved word
                }
                break;

            // States for 'bool'
            case 1: // 'b'
                current_state = (lexeme[i] == 'o') ? 2 : 0;
                break;
            case 2: // 'bo'
                current_state = (lexeme[i] == 'o') ? 3 : 0;
                break;
            case 3: // 'boo'
                current_state = (lexeme[i] == 'l') ? 4 : 0;
                break;
            case 4: // Final state for 'bool'
                return (lexeme[i] == '\0') ? 1 : 0;

            // States for 'chain' and 'char'
            case 5: // 'c'
                current_state = (lexeme[i] == 'h') ? 6 : 0;
                break;
            case 6: // 'ch'
                current_state = (lexeme[i] == 'a') ? 7 : 0;
                break;
            case 7: // 'cha'
                switch (lexeme[i]) {
                    case 'i': current_state = 8; break;
                    case 'r': current_state = 10; break;
                    default: return 0;
                }
                break;
            case 8: // 'chai'
                current_state = (lexeme[i] == 'n') ? 9 : 0;
                break;
            case 9: // Final state for 'chain'
                return (lexeme[i] == '\0') ? 1 : 0;
            case 10: // Final state for 'char'
                return (lexeme[i] == '\0') ? 1 : 0;

            // States for 'false' and 'float'
            case 11: // 'f'
                switch (lexeme[i]) {
                    case 'a': current_state = 12; break;
                    case 'l': current_state = 16; break;
                    default: return 0;
                }
                break;
            case 12: // 'fa'
                current_state = (lexeme[i] == 'l') ? 13 : 0;
                break;
            case 13: // 'fal'
                current_state = (lexeme[i] == 's') ? 14 : 0;
                break;
            case 14: // 'fals'
                current_state = (lexeme[i] == 'e') ? 15 : 0;
                break;
            case 15: // Final state for 'false'
                return (lexeme[i] == '\0') ? 1 : 0;
            case 16: // 'fl'
                current_state = (lexeme[i] == 'o') ? 17 : 0;
                break;
            case 17: // 'flo'
                current_state = (lexeme[i] == 'a') ? 18 : 0;
                break;
            case 18: // 'floa'
                current_state = (lexeme[i] == 't') ? 19 : 0;
                break;
            case 19: // Final state for 'float'
                return (lexeme[i] == '\0') ? 1 : 0;

            // States for 'int'
            case 20: // 'i'
                current_state = (lexeme[i] == 'n') ? 21 : 0;
                break;
            case 21: // 'in'
                current_state = (lexeme[i] == 't') ? 22 : 0;
                break;
            case 22: // Final state for 'int'
                return (lexeme[i] == '\0') ? 1 : 0;

            // States for 'true'
            case 23: // 't'
                current_state = (lexeme[i] == 'r') ? 24 : 0;
                break;
            case 24: // 'tr'
                current_state = (lexeme[i] == 'u') ? 25 : 0;
                break;
            case 25: // 'tru'
                current_state = (lexeme[i] == 'e') ? 26 : 0;
                break;
            case 26: // Final state for 'true'
                return (lexeme[i] == '\0') ? 1 : 0;

            default:
                return 0; // Not a valid reserved word
        }
        i++;
    }

    return 0; // If not accepted by the DFA
}
